{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda-11.2\nNVCC: Build cuda_11.2.r11.2/compiler.29373293_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.1\nOpenCV: 4.5.1\nMMCV: 1.2.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.2\nMMDetection: 2.10.0+5af5063", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = '/home/hongbin/Downloads/mmdetection/work_dirs/my_custom_config_0327/latest.pth'\nworkflow = [('train', 1)]\nmodel = dict(\n    type='YOLOV3',\n    pretrained='open-mmlab://darknet53',\n    backbone=dict(type='Darknet', depth=53, out_indices=(3, 4, 5)),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=8,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\nclasses = ('Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting', 'Cyclist',\n           'Tram', 'Misc')\ndata_root = '/home/hongbin/Downloads/mmdetection/data/KITTI/'\nimg_norm_cfg = dict(\n    mean=[0.3676692, 0.38692534, 0.37536806],\n    std=[0.3676692, 0.38692534, 0.37536806],\n    to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Expand',\n        mean=[0.3676692, 0.38692534, 0.37536806],\n        to_rgb=True,\n        ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0.3676692, 0.38692534, 0.37536806],\n        std=[0.3676692, 0.38692534, 0.37536806],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0.3676692, 0.38692534, 0.37536806],\n                std=[0.3676692, 0.38692534, 0.37536806],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting',\n                 'Cyclist', 'Tram', 'Misc'),\n        ann_file=\n        '/home/hongbin/Downloads/mmdetection/data/KITTI/annotations/train.json',\n        img_prefix='/home/hongbin/Downloads/mmdetection/data/KITTI/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Expand',\n                mean=[0.3676692, 0.38692534, 0.37536806],\n                to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0.3676692, 0.38692534, 0.37536806],\n                std=[0.3676692, 0.38692534, 0.37536806],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting',\n                 'Cyclist', 'Tram', 'Misc'),\n        ann_file=\n        '/home/hongbin/Downloads/mmdetection/data/KITTI/annotations/val.json',\n        img_prefix='/home/hongbin/Downloads/mmdetection/data/KITTI/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0.3676692, 0.38692534, 0.37536806],\n                        std=[0.3676692, 0.38692534, 0.37536806],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting',\n                 'Cyclist', 'Tram', 'Misc'),\n        ann_file=\n        '/home/hongbin/Downloads/mmdetection/data/KITTI/annotations/test.json',\n        img_prefix='/home/hongbin/Downloads/mmdetection/data/KITTI/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0.3676692, 0.38692534, 0.37536806],\n                        std=[0.3676692, 0.38692534, 0.37536806],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(type='Adagrad', lr=0.01, weight_decay=0.0005, eps=1e-10)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\npolicy = ('CosineAnealing', )\nlr_config = dict(\n    policy='CosineAnnealing',\n    min_lr_ratio=0.001,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=0.1)\ntotal_epochs = 50\nevaluation = dict(interval=1, metric=['bbox'])\nwork_dir = './work_dirs/my_custom_config_0327'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "my_custom_config_0327.py"}
